#!/usr/bin/env perl

use warnings;
use strict;

use Nagios::Plugin;

my $WARNING = '90%';
my $CRITICAL = '98%';

my $np = Nagios::Plugin->new(
    usage => "Usage: %s [ -v|--verbose ] [-t <timeout>] <pool>",
);

$np->getopts;

my $pool = shift
    or $np->nagios_die("You must specify a pool to monitor");

my $found;
foreach (`zpool list -H -o name,size,alloc,free,cap,health`) {
    chomp;
    my ($name, $size, $used, $avail, $cap, $health) = split /\t/;
    next unless $name eq $pool;
    $found++;
    my ($size_v, $size_u) = $size =~ /^(\d+(?:\.\d+)?)(\D+)$/;
    my ($used_v, $used_u) = $used =~ /^(\d+(?:\.\d+)?)(\D+)$/;
    my ($avail_v, $avail_u) = $avail =~ /^(\d+(?:\.\d+)?)(\D+)$/;
    #use YAML; warn Dump({
    #        name => $name,
    #        size => $size, size_v => $size_v, size_u => $size_u,
    #        used => $used, used_v => $used_v, used_u => $used_u,
    #        avail => $avail, avail_v => $avail_v, avail_u => $avail_u,
    #        cap => $cap,
    #        health => $health,
    #    });
    my %perfargs = (
        label => $name,
        value => $used_v,
        uom => $used_u,
    );
    if ($used_u ne $size_u) {
        warn "alloc and free units not the same!";
    } else {
        $perfargs{min} = 0;
        $perfargs{max} = $size_v;
    }
    $used_u .= 'B' unless $used_u =~ /B$/;
    $np->add_perfdata(%perfargs);
    if ($health eq 'ONLINE') {
        $np->add_message(OK, "$name $health");
    } elsif ($health eq 'DEGRADED') {
        $np->add_message(WARNING, "$name $health");
    } elsif ($health eq 'FAULTED') {
        $np->add_message(CRITICAL, "$name $health");
    } else {
        $np->add_message(UNKNOWN, "$name $health");
    }
}
$found
    or $np->nagios_die("Did not find pool $pool");

$np->nagios_exit($np->check_messages());

